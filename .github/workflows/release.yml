name: release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Get the release version from the Cargo.toml
        shell: bash
        run: |
          # https://github.com/salsify/action-detect-and-tag-new-version
          # detect tag `tag-template` is v{VERSION}
          echo "VERSION=v$(sed -n 's/^version = \"\(.*\)\"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      - name: Show the version
        run: |
          echo "version is: $VERSION"

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS:
      TARGET_DIR: ./target
      CROSS_VERSION: v0.2.5
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
            strip: x86_64-linux-musl-strip
          - build: stable-x86
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
            qemu: i386
          - build: stable-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
            qemu: qemu-aarch64
          - build: stable-arm-gnueabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            strip: arm-linux-gnueabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabihf
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabihf
            strip: arm-linux-musleabihf-strip
            qemu: qemu-arm
          - build: stable-arm-musleabi
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabi
            strip: arm-linux-musleabi-strip
            qemu: qemu-arm
          - build: stable-powerpc64
            os: ubuntu-latest
            rust: stable
            target: powerpc64-unknown-linux-gnu
            strip: powerpc64-linux-gnu-strip
            qemu: qemu-ppc64
          - build: stable-s390x
            os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            strip: s390x-linux-gnu-strip
            qemu: qemu-s390x
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-latest
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: win32-msvc
            os: windows-latest
            rust: nightly
            target: i686-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install packages(ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          if ! command -V sudo; then
            apt-get update
            apt-get install -y --no-install-recommends sudo
          fi
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
          zsh xz-utils liblz4-tool musl-tools brotli zstd

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use cross
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        shell: bash
        run: |
          # https://docs.github.com/ja/actions/learn-github-actions/variables
          dir="$RUNNER_TEMP/cross-download"
          mkdir "$dir"
          echo "$dir" >> $GITHUB_PATH
          cd "$dir"
          curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
          tar xf cross-x86_64-unknown-linux-musl.tar.gz
          echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO}}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/zpass.exe"
          else
            bin="target/${{ matrix.target }}/release/zpass"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip release binary (macos)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: strip "$BIN"

      - name: Strip release binary (cross)
        if: env.CARGO == 'cross'
        shell: bash
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            "ghcr.io/cross-rs/${{ matrix.target }}:main" \
            "${{ matrix.strip }}" \
            "/$BIN"

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=zpass-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/doc
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,LICENSE} "$ARCHIVE"/
          cp CHANGELOG.md "$ARCHIVE"/doc/

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  # build-release-deb:
  #   name: build-release-deb
  #   needs: ["create-release"]
  #   runs-on: ubuntu-latest
  #   env:
  #     TARGET: x86_64-unknown-linux-musl
  #     RUST_BACKTRACE: 1

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install packages (Ubuntu)
  #       shell: bash
  #       run: |
  #         if ! command -V sudo; then
  #           apt-get update
  #           apt-get install -y --no-install-recommends sudo
  #         fi
  #         sudo apt-get update
  #         sudo apt-get install -y --no-install-recommends \
  #           zsh xz-utils liblz4-tool musl-tools brotli zstd

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: nightly
  #         target: ${{ env.TARGET }}

  #     - name: Install cargo-deb
  #       shell: bash
  #       run: |
  #         cargo install cargo-deb

  #     - name: Build debug binary to create release assets
  #       shell: bash
  #       run: |
  #         cargo build --target ${{ env.TARGET }}
  #         bin="target/${{ env.TARGET }}/debug/zpass"
  #         echo "BIN=$bin" >> $GITHUB_ENV

  #     - name: Create deployment directory
  #       shell: bash
  #       run: |
  #         dir=deployment/deb
  #         mkdir -p "$dir"
  #         echo "DEPLOY_DIR=$dir" >> $GITHUB_ENV

  #     - name: Build release binary
  #       shell: bash
  #       run: |
  #         cargo deb --profile deb --target ${{ env.TARGET }}
  #         version="${{ needs.create-release.outputs.version }}"
  #         echo "DEB_DIR=target/${{ env.TARGET }}/debian" >> $GITHUB_ENV
  #         echo "DEB_NAME=zpass_$version-1_amd64.deb" >> $GITHUB_ENV

  #     - name: Create sha256 sum of deb file
  #       shell: bash
  #       run: |
  #         cd "$DEB_DIR"
  #         sum="$DEB_NAME.sha256"
  #         shasum -a 256 "$DEB_NAME" > "$sum"
  #         echo "SUM=$sum" >> $GITHUB_ENV

  #     - name: Upload release archive
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       shell: bash
  #       run: |
  #         cd "$DEB_DIR"
  #         version="${{ needs.create-release.outputs.version }}"
  #         gh release upload "$version" "$DEB_NAME" "$SUM"
